var V=Object.create;var n=Object.defineProperty;var b=Object.getOwnPropertyDescriptor;var q=Object.getOwnPropertyNames;var B=Object.getPrototypeOf,M=Object.prototype.hasOwnProperty;var d=r=>n(r,"__esModule",{value:!0});var w=(r,e)=>{d(r);for(var a in e)n(r,a,{get:e[a],enumerable:!0})},C=(r,e,a)=>{if(e&&typeof e=="object"||typeof e=="function")for(let t of q(e))!M.call(r,t)&&t!=="default"&&n(r,t,{get:()=>e[t],enumerable:!(a=b(e,t))||a.enumerable});return r},i=r=>C(d(n(r!=null?V(B(r)):{},"default",r&&r.__esModule&&"default"in r?{get:()=>r.default,enumerable:!0}:{value:r,enumerable:!0})),r);w(exports,{requestToEvent:()=>H});var P=i(require("url")),g=i(require("raw-body")),E=i(require("mime-types"));var y=i(require("query-string"));function m(r){let e=(0,y.parse)(r,{arrayFormat:"comma"}),a={},t={};for(let s of Object.keys(e)){let o=e[s];Array.isArray(o)?t[s]=o:o&&(a[s]=o)}return{queryStringParameters:a,multiValueQueryStringParameters:t}}var x=/image|audio|video|application\/pdf|application\/zip|applicaton\/octet-stream/i;function u(r){return Boolean(r)&&x.test(r)}function f(r){var o,p;let e=r.rawQuery||r.path.split("?")[1],{queryStringParameters:a,multiValueQueryStringParameters:t}=m(e),s=(p=r.isBase64Encoded)!=null?p:u(((o=r==null?void 0:r.headers)==null?void 0:o["content-type"])||"");return{rawUrl:r.rawUrl||r.path,rawQuery:e,path:r.path,httpMethod:r.httpMethod||"GET",headers:r.headers||{},multiValueHeaders:r.multiValueHeaders||{},queryStringParameters:r.queryStringParameters||a,multiValueQueryStringParameters:r.multiValueQueryStringParameters||t,pathParameters:r.pathParameters||{},body:r.body||null,isBase64Encoded:s!=null?s:!1,requestContext:r.requestContext||{},resource:r.resource||""}}function h(r){let e={},a={};for(let t of Object.keys(r)){let s=t.toLowerCase(),o=r[t];!o||(Array.isArray(o)?a[s]=o:e[s]=o)}return{headers:e,multiValueHeaders:a}}async function H(r){let{url:e="",method:a}=r,{headers:t,multiValueHeaders:s}=h(r.headers),o=u(t["content-type"]||""),l=t["content-length"]?await(0,g.default)(r,{limit:"1mb",encoding:t["content-type"]&&E.default.charset(t["content-type"])||!0}):void 0,c=(0,P.parse)(e).query||"",{queryStringParameters:S,multiValueQueryStringParameters:Q}=m(c);return f({rawUrl:e,path:e,httpMethod:a,headers:t,multiValueHeaders:s,rawQuery:c,queryStringParameters:S,multiValueQueryStringParameters:Q,body:l?Buffer.from(l).toString(o?"base64":"utf8"):null,isBase64Encoded:o,pathParameters:void 0,requestContext:{},resource:""})}0&&(module.exports={requestToEvent});
//# sourceMappingURL=data:application/json;base64,
