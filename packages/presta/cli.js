#!/usr/bin/env node
var Qe=Object.create;var L=Object.defineProperty,Xe=Object.defineProperties,Ye=Object.getOwnPropertyDescriptor,Ke=Object.getOwnPropertyDescriptors,Ze=Object.getOwnPropertyNames,ce=Object.getOwnPropertySymbols,qe=Object.getPrototypeOf,ue=Object.prototype.hasOwnProperty,et=Object.prototype.propertyIsEnumerable;var pe=(e,t,r)=>t in e?L(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r,m=(e,t)=>{for(var r in t||(t={}))ue.call(t,r)&&pe(e,r,t[r]);if(ce)for(var r of ce(t))et.call(t,r)&&pe(e,r,t[r]);return e},C=(e,t)=>Xe(e,Ke(t)),tt=e=>L(e,"__esModule",{value:!0});var rt=(e,t,r)=>{if(t&&typeof t=="object"||typeof t=="function")for(let o of Ze(t))!ue.call(e,o)&&o!=="default"&&L(e,o,{get:()=>t[o],enumerable:!(r=Ye(t,o))||r.enumerable});return e},l=e=>rt(tt(L(e!=null?Qe(qe(e)):{},"default",e&&e.__esModule&&"default"in e?{get:()=>e.default,enumerable:!0}:{value:e,enumerable:!0})),e);var le=l(require("fs-extra")),ze=l(require("sade"));var ot="presta",st="0.0.0",it="Hyper minimal framework for the modern web.",at="cli.js",nt="index.d.ts",lt={presta:"cli.js"},ct={build:"node scripts/build",test:"rm -rf ./fixtures && NODE_ENV=test node test","test:watch":"NODE_ENV=test nodemon -e js,ts --ignore fixtures/ test",cloc:"npx cloc lib/*.ts",typecheck:"npx tsc --noEmit"},ut={type:"git",url:"git+ssh://git@github.com/sure-thing/presta.git"},pt="estrattonbailey",mt="MIT",dt={url:"https://github.com/sure-thing/presta/issues"},gt="https://github.com/sure-thing/presta#readme",ft={"@netlify/functions":"^0.7.2",chokidar:"^3.4.3",deepmerge:"^4.2.2",esbuild:"^0.12.9","esbuild-register":"^2.5.0",filewatcher:"^3.0.1","fs-extra":"^9.0.1","get-port":"^5.1.1",kleur:"^4.1.4",matched:"^5.0.0","mime-types":"^2.1.30","module-alias":"^2.2.2",ms:"^2.1.2",picomatch:"^2.3.0","pocket.io":"^0.1.4","query-string":"^6.13.7","raw-body":"^2.4.1",regexparam:"^1.3.0","route-sort":"^1.0.0",sade:"^1.7.3",sirv:"^1.0.7","watch-dependency-graph":"^2.6.1"},ht={baretest:"^2.0.0",nodemon:"^2.0.4",proxyquire:"^2.1.3","supertest-fetch":"^1.4.3"},me={name:ot,version:st,description:it,main:at,types:nt,bin:lt,scripts:ct,repository:ut,author:pt,license:mt,bugs:dt,homepage:gt,dependencies:ft,devDependencies:ht};var $=l(require("kleur"));var w=l(require("path"));function de(){let e={};function t(a,...i){e[a]&&e[a].map(s=>s(...i))}function r(a,i){return e[a]=e[a]?e[a].concat(i):[i],()=>e[a].splice(e[a].indexOf(i),1)}function o(){e={}}function n(a){return e[a]||[]}return{emit:t,on:r,clear:o,listeners:n}}var ge="presta.config.js",b;(function(o){o.PRODUCTION="production",o.DEVELOPMENT="development",o.TEST="test"})(b||(b={}));global.__presta__=global.__presta__||{pid:process.pid,cwd:process.cwd(),env:b.TEST,debug:!1};function fe(e){let t=process.cwd();return e.files&&(e.files=[].concat(e.files).map(r=>w.default.resolve(t,r))),e.output&&(e.output=w.default.resolve(t,e.output)),e.assets&&(e.assets=w.default.resolve(t,e.assets)),e}function O(e,t=!1){try{return require(w.default.resolve(e||ge))}catch(r){return e&&(g({label:"error",error:r}),t&&process.exit(1)),{}}}function he(){return u({label:"debug",message:"config file values cleared"}),global.__presta__=P(C(m({},global.__presta__),{config:{}})),global.__presta__}function j(){return global.__presta__}function P({env:e=global.__presta__.env,config:t={},cli:r={}}){t=fe(m({},t)),r=fe(m({},r));let o={output:r.output||t.output||w.default.resolve("build"),assets:r.assets||t.assets||w.default.resolve("public"),files:r.files&&r.files.length?r.files:t.files?[].concat(t.files):[]};return global.__presta__=C(m(m({},global.__presta__),o),{env:e,debug:r.debug||global.__presta__.debug,cwd:process.cwd(),configFilepath:w.default.resolve(r.config||ge),functionsOutputDir:w.default.join(o.output,"functions"),staticOutputDir:w.default.join(o.output,"static"),routesManifest:w.default.join(o.output,"routes.json"),events:de()}),u({label:"debug",message:`config created ${JSON.stringify(global.__presta__)}`}),global.__presta__}var S;(function(n){n.Debug="debug",n.Info="info",n.Warn="warn",n.Err="error"})(S||(S={}));var be=[],bt={[S.Debug]:"magenta",[S.Info]:"blue",[S.Warn]:"yellow",[S.Err]:"red"};function U(e){if(j().env===b.TEST)be.push(e);else{let t=j().debug,r=j().env===b.PRODUCTION?"prod":"dev";if(!t&&e.level===S.Debug)return;console.log([$.default.gray(r),$.default[bt[e.level]](e.label),e.message,e.duration?$.default.gray("+"+e.duration):"",e.error?`

${e.error.stack||e.error}

`:""].filter(Boolean).join(" "))}}function u(e){U(m({level:S.Debug},e))}function y(e){U(m({level:S.Info},e))}function F(e){U(m({level:S.Warn},e))}function g(e){U(m({level:S.Err},e))}function z(...e){j().env===b.TEST?be.push(e):console.log(...e)}function E(){j().env!==b.TEST&&console.log("")}var X=l(require("fs-extra")),$e=l(require("watch-dependency-graph")),Te=l(require("chokidar")),Oe=l(require("picomatch"));var G=l(require("fs-extra")),ee=l(require("path")),xe=l(require("route-sort"));function ye(e){for(var t=5381,r=e.length;r;)t=t*33^e.charCodeAt(--r);return(t>>>0).toString(36)}function yt(e,t){let{route:r}=require(e),o=ee.default.basename(e).split(".").reverse().slice(1).reverse().join("."),n=ee.default.join(t.functionsOutputDir,t.env===b.PRODUCTION?o+"-"+ye(G.default.readFileSync(e,"utf8"))+".js":o+".js");return u({label:"debug",message:`generating ${o} lambda`}),G.default.outputFileSync(n,`import { wrapHandler } from 'presta';
import * as file from '${e}';
export const route = file.route
export const handler = wrapHandler(file)`),[r,n]}function J(e,t){let r=e.map(a=>{try{return yt(a,t)}catch(i){return g({label:"error",error:i}),null}}).filter(Boolean),o=(0,xe.default)(r.map(a=>a[0])),n={};for(let a of o)n[a]=r.find(i=>i[0]===a)[1];return G.default.outputFileSync(t.routesManifest,JSON.stringify(n)),r}var te=l(require("fs-extra")),ve=l(require("path")),we=l(require("matched"));function T(e){return/export\s.+\sroute\s+\=/.test(te.default.readFileSync(e,"utf-8"))}function M(e){return/export\s.+\sgetStaticPaths/.test(te.default.readFileSync(e,"utf-8"))}function H(e){return[].concat(e.files).map(t=>ve.default.resolve(e.cwd,t)).map(t=>we.default.sync(t,{cwd:e.cwd})).flat()}var Ee=l(require("fs-extra")),re=l(require("path")),Pe=l(require("mime-types"));function _(){let e=process.hrtime();return()=>{let[t,r]=process.hrtime(e),o=r/1e6;return t<1?(o>=1?o.toFixed(0):o.toFixed(2))+"ms":t+"."+o.toFixed(0)+"s"}}var Se=l(require("regexparam"));function _e(e,t){let r=(0,Se.default)(t),o=0,n={},a=r.pattern.exec(e);for(;o<r.keys.length;)n[r.keys[o]]=a[++o]||null;return n}function xt(e){return typeof e=="object"?JSON.stringify(e):e}function Q(e){let{isBase64Encoded:t=!1,statusCode:r=200,headers:o={},multiValueHeaders:n={},body:a="",html:i=void 0,json:s=void 0,xml:c=void 0}=typeof e=="string"?{body:e}:e,d="text/html; charset=utf-8";return s?d="application/json; charset=utf-8":c&&(d="application/xml; charset=utf-8"),{isBase64Encoded:t,statusCode:r,headers:m({"Content-Type":d},o),multiValueHeaders:n,body:xt(a||i||s||c||"")}}var R={};var Fe=l(require("fs-extra")),Ce=l(require("path"));function N(e,t){u({label:"debug",message:`removing old static file ${e}`}),Fe.default.remove(Ce.default.join(t.staticOutputDir,e))}function vt(e,t="html"){return re.default.extname(e)?e:t==="html"?`${e}/index.html`:`${e}.${t}`}function A(e,t){return new Promise(async(r,o)=>{u({label:"debug",message:`rendering ${JSON.stringify(e)}`});let n=[];for(let a of e){let i=a.replace(t.cwd,"");try{delete require.cache[a];let s=require(a),c=await s.getStaticPaths(),d=R[a]=R[a]||[],p=[];if(!c||!c.length){F({label:"paths",message:`${i} - no paths to render`}),d.forEach(v=>N(v,t));continue}for(let v of c){let B=_(),f={path:v,params:s.route?_e(v,s.route):{}},V=Q(await s.handler(f,{})),x=V.headers["Content-Type"],q=x?Pe.default.extension(x):"html",D=vt(v,q);n.push(D),p.push(D),Ee.default.outputFileSync(re.default.join(t.staticOutputDir,D),V.body,"utf-8"),y({label:"built",message:v,duration:B()})}for(let v of d)p.includes(v)||N(v,t);R[a]=p}catch(s){t.env==="development"?(g({label:"error",message:"errors detected, pausing...",error:s}),r({allGeneratedFiles:n})):(g({label:"error",error:s}),o(s));break}}r({allGeneratedFiles:n})})}function Y(e,t){let r=_();J(e,t),e.length&&y({label:"built",message:"lambdas",duration:r()})}async function ke(e){let t=H(e),r=X.default.existsSync(e.configFilepath);t.length||F({label:"paths",message:"no files configured"}),Y(t.filter(T),e);let o=(0,$e.default)({alias:{"@":e.cwd}}),n=Te.default.watch(e.cwd,{ignoreInitial:!0,ignored:[e.output,e.assets]});async function a(){t=H(e),await A(t.filter(M),e),Y(t.filter(T),e)}async function i(s){M(s)&&await A([s],e),T(s)&&Y(t.filter(T),e),e.events.emit("refresh"),e.events.emit("done",[s])}o.on("remove",([s])=>{u({label:"watch",message:`fileWatcher - removed ${s}`}),t.splice(t.indexOf(s),1),Y(t.filter(T),e),s===e.configFilepath&&(e=he(),r=!1,a()),(R[s]||[]).forEach(c=>N(c,e)),e.events.emit("remove",s)}),o.on("change",([s])=>{if(u({label:"watch",message:`fileWatcher - changed ${s}`}),s===e.configFilepath){delete require.cache[e.configFilepath];try{e=P({config:O(e.configFilepath)}),a()}catch(c){g({label:"error",error:c})}}else i(s);e.events.emit("change",s)}),o.on("error",s=>{g({label:"error",error:s})}),n.on("all",async(s,c)=>{if(!(!/add|change/.test(s)||!X.default.existsSync(c)||X.default.lstatSync(c).isDirectory())){if((0,Oe.default)(e.files)(c)&&!t.includes(c)&&(u({label:"watch",message:`globalWatcher - add ${c}`}),t.push(c),o.add(c),i(c)),c===e.configFilepath&&!r){u({label:"watch",message:`globalWatcher - add config file ${c}`}),o.add(e.configFilepath);try{e=P({config:O(e.configFilepath)}),r=!0,a()}catch(d){g({label:"error",error:d})}}e.events.emit("add",c)}}),o.add(t),r&&o.add(e.configFilepath);try{t.map(require)}catch(s){g({label:"error",error:s})}}var oe=l(require("fs-extra")),De=l(require("esbuild"));async function je(e){let t=_(),r=H(e),o=r.filter(M),n=r.filter(T);if(u({label:"build",message:"starting build"}),!o.length&&!n.length)F({label:"files",message:"no files were found, nothing to build"});else{let a="",i=0,s="",c="",d=await Promise.allSettled([(async()=>{if(o.length){let p=_(),{allGeneratedFiles:v}=await A(o,e);a=p(),i=v.length}})(),(async()=>{if(n.length){let p=_();J(n,e),await(0,De.build)({entryPoints:Object.values(require(e.routesManifest)),outdir:e.functionsOutputDir,bundle:!0,platform:"node",target:["node12"],minify:!0,allowOverwrite:!0}),s=p()}})(),(async()=>{if(oe.default.existsSync(e.assets)){let p=_();oe.default.copySync(e.assets,e.staticOutputDir),c=p()}})()]);if(d.find(p=>p.status==="rejected")){u({label:"build",message:"build partially failed"}),d.filter(p=>p.status==="rejected").forEach(p=>g({label:"error",error:p.reason})),process.exit(1);return}E(),a&&y({label:"static",message:`rendered ${i} file(s)`,duration:a}),s&&y({label:"lambda",message:`compiled ${n.length} function(s)`,duration:s}),c&&y({label:"assets",message:`copied in ${c}`}),(a||s)&&(E(),y({label:"complete",message:`in ${t()}`}),E())}}var ie=l(require("fs")),K=l(require("path")),Ae=l(require("http")),We=l(require("get-port")),ae=l(require("sirv")),Be=l(require("chokidar")),Ve=l(require("mime-types")),Le=l(require("regexparam"));var se=`<!-- built with presta https://npm.im/presta -->
<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width,initial-scale=1" />
    <title>404</title>
    <link
      rel="stylesheet"
      type="text/css"
      href="https://unpkg.com/svbstrate@4.1.1/dist/svbstrate.css"
    />
  </head>
  <body>
    <div class="f aic jcc" style="height: 100vh">
      <h2 class="p1" style="color: blue">404 Not Found</h2>
    </div>
  </body>
</html>`;var Re=l(require("url")),Ie=l(require("query-string")),Me=l(require("raw-body")),He=l(require("mime-types")),wt=/image|audio|video|application\/pdf|application\/zip|applicaton\/octet-stream/i;function St(e){return Boolean(e)&&wt.test(e)}async function Ne(e){let t=String(e.headers["x-forwarded-for"])||e.connection.remoteAddress,r=t.split(t.includes(".")?":":",").pop().trim(),o=St(e.headers["content-type"]),n=e.headers["content-length"]?await(0,Me.default)(e,{limit:"1mb",encoding:He.default.charset(e.headers["content-type"])||void 0}):void 0;return{path:e.url,httpMethod:e.method,headers:C(m({},e.headers),{"client-ip":r}),multiValueHeaders:Object.keys(e.headers).reduce((a,i)=>e.headers[i].includes(",")?C(m({},a),{[i]:e.headers[i].split(",")}):a,{}),queryStringParameters:(0,Ie.parse)((0,Re.parse)(e.url).query),body:n?new Buffer(n).toString(o?"base64":"utf8"):void 0,isBase64Encoded:o}}function k(e,t){let r=Q(t);for(let o in t.multiValueHeaders)e.setHeader(o,String(t.multiValueHeaders[o]));for(let o in t.headers)e.setHeader(o,String(t.headers[o]));e.statusCode=r.statusCode,e.write(r.body),e.end()}var _t=["position: fixed","bottom: 24px","right: 24px","width: 32px","height: 32px","border-radius: 32px","background: white","color: #FF7A93","font-size: 20px","font-weight: bold","text-align: center","line-height: 31px","box-shadow: 0px 0px 1px rgba(0, 0, 0, 0.04), 0px 4px 8px rgba(0, 0, 0, 0.04), 0px 16px 24px rgba(0, 0, 0, 0.04), 0px 24px 32px rgba(0, 0, 0, 0.04)"],I=`
  <div style="${_t.join(";")}">~</div>
`;function Ue(e,t){let r=K.default.join(e,t);if(!K.default.extname(t))try{return ie.default.readFileSync(K.default.join(e,t,"index.html"),"utf8")}catch(o){}return ie.default.readFileSync(r,"utf8")}function Ft({port:e}){return`
    <script>
      (function (global) {
        try {
          const socketio = document.createElement('script')
          socketio.src = 'https://unpkg.com/pocket.io@0.1.4/min.js'
          socketio.onload = function init () {
            var disconnected = false
            var socket = io('http://localhost:${e}', {
              reconnectionAttempts: 3
            })
            socket.on('connect', function() { console.log('presta connected') })
            socket.on('refresh', function() {
              global.location.reload()
            })
            socket.on('disconnect', function() {
              disconnected = true
            })
            socket.on('reconnect_failed', function(e) {
              if (disconnected) return
              console.error("presta - connection to server on :${e} failed")
            })
          }
          document.head.appendChild(socketio)
        } catch (e) {}
      })(this);
    <\/script>
  `}function Ct({port:e,config:t}){let r=Ft({port:e}),o=t.staticOutputDir,n=t.assets;return async function(i,s){let c=_();if(/^.+\..+$/.test(i.url)&&!/\.html?$/.test(i.url))u({label:"debug",message:`attempting to serve static asset ${i.url}`}),(0,ae.default)(n,{dev:!0})(i,s,()=>{(0,ae.default)(o,{dev:!0})(i,s,()=>{F({label:"serve",message:`404 ${i.url}`,duration:c()}),k(s,{statusCode:404,body:se+r+I})})});else try{u({label:"debug",message:`attempting to render static HTML for ${i.url}`});let d=Ue(o,i.url)+r+I;y({label:"serve",message:`200 ${i.url}`,duration:c()}),k(s,{body:d})}catch(d){u({label:"debug",message:"serve error",error:d}),/ENOENT|EISDIR/.test(d.message)||console.error(d);try{let p=require(t.routesManifest),B=Object.keys(p).map(f=>({matcher:(0,Le.default)(f),route:f})).filter(({matcher:f})=>f.pattern.test(i.url.split("?")[0])).map(({route:f})=>p[f])[0];if(B){u({label:"debug",message:`attempting to render lambda for ${i.url}`});let{handler:f}=require(B),V=await Ne(i),x=await f(V,{}),q=x.statusCode>299&&x.statusCode<399,D=x.headers["Content-Type"],Je=D?Ve.default.extension(D):"html";y({label:"serve",message:`${x.statusCode} ${q?x.headers.Location:i.url}`,duration:c()}),k(s,{statusCode:x.statusCode,headers:x.headers,multiValueHeaders:x.multiValueHeaders,body:Je==="html"?x.body.split("</body>")[0]+r+I:x.body})}else{u({label:"debug",message:`attempting to render static 404.html page for ${i.url}`});try{let f=Ue(o,"404")+r+I;F({label:"serve",message:`404 ${i.url}`,duration:c()}),k(s,{statusCode:404,body:f})}catch(f){f.message.includes("ENOENT")||console.error(f),u({label:"debug",message:`rendering default 404 HTML page for ${i.url}`}),F({label:"serve",message:`404 ${i.url}`,duration:c()}),k(s,{statusCode:404,body:se+r+I})}}}catch(p){u({label:"debug",message:`rendering default 500 HTML page for ${i.url}`}),g({label:"serve",message:`500 ${i.url}`,error:p,duration:c()}),k(s,{statusCode:500,body:""+r+I})}}}}async function ne(e){let t=await(0,We.default)({port:4e3}),r=Ae.default.createServer(Ct({port:t,config:e})).listen(t),o=require("pocket.io")(r,{serveClient:!1});return e.events.on("refresh",()=>{u({label:"debug",message:"refresh event received"}),o.emit("refresh")}),Be.default.watch(e.assets,{ignoreInitial:!0}).on("all",()=>{e.events.emit("refresh")}),{port:t}}var W=(0,ze.default)("presta"),Z="presta.config.js";function Ge(e={}){require("module-alias").addAliases({"@":process.cwd(),"presta:internal":__dirname}),require("esbuild-register/dist/node").register(e)}W.version(me.version).option("--config, -c",`Path to a config file \u2014 defaults to ${Z}`).option("--output, -o","Specify output directory for built files \u2014 defaults to ./build").option("--assets, -a","Specify static asset directory \u2014 defaults to ./public").option("--debug, -d","Enable debug mode (prints more logs)");W.command("build","Render files(s) to output directory.",{default:!0}).example("build").example("build files/**/*.js").example(`build -c ${Z}`).action(async e=>{Ge(),console.clear();let t=P({env:b.PRODUCTION,config:O(e.config,!0),cli:C(m({},e),{files:e._})});le.default.emptyDirSync(t.output),z(`${$.default.blue("presta build")}`),E(),await je(t)});W.command("watch").option("--no-serve, -n","Do not run local dev server.",!1).describe("Watch and build files(s) to output directory").example("watch").example("watch ./files/**/*.js").example("watch ./files/**/*.js -o ./out").example(`watch -c ${Z}`).action(async e=>{Ge(),console.clear();let t=P({env:b.DEVELOPMENT,config:O(e.config),cli:C(m({},e),{files:e._})});if(le.default.emptyDirSync(t.output),e.n)y({label:"dev"}),E();else{let r=await ne(t);z(`${$.default.blue("presta dev")} - http://localhost:${r.port}`),E()}ke(t)});W.command("serve").describe("Serve built files.").example("serve").example("serve -o ./out").example(`watch -c ${Z}`).action(async e=>{console.clear();let t=P({env:b.PRODUCTION,config:O(e.config),cli:e}),r=await ne(t);z(`${$.default.blue("presta serve")} - http://localhost:${r.port}`),E()});W.parse(process.argv);
//# sourceMappingURL=data:application/json;base64,
