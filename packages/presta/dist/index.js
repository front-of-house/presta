var T=Object.create;var i=Object.defineProperty,_=Object.defineProperties,R=Object.getOwnPropertyDescriptor,S=Object.getOwnPropertyDescriptors,O=Object.getOwnPropertyNames,b=Object.getOwnPropertySymbols,D=Object.getPrototypeOf,x=Object.prototype.hasOwnProperty,I=Object.prototype.propertyIsEnumerable;var y=(e,t,r)=>t in e?i(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r,s=(e,t)=>{for(var r in t||(t={}))x.call(t,r)&&y(e,r,t[r]);if(b)for(var r of b(t))I.call(t,r)&&y(e,r,t[r]);return e},f=(e,t)=>_(e,S(t)),C=e=>i(e,"__esModule",{value:!0});var W=(e,t)=>{C(e);for(var r in t)i(e,r,{get:t[r],enumerable:!0})},j=(e,t,r)=>{if(t&&typeof t=="object"||typeof t=="function")for(let o of O(t))!x.call(e,o)&&o!=="default"&&i(e,o,{get:()=>t[o],enumerable:!(r=R(t,o))||r.enumerable});return e},c=e=>j(C(i(e!=null?T(D(e)):{},"default",e&&e.__esModule&&"default"in e?{get:()=>e.default,enumerable:!0}:{value:e,enumerable:!0})),e);W(exports,{getCurrentConfig:()=>g,wrapHandler:()=>v});var h=c(require("regexparam"));function w(e,t){let r=(0,h.default)(t),o=0,n={},l=r.pattern.exec(e)||[];for(;o<r.keys.length;)n[r.keys[o]]=l[++o];return n}function H(e){return typeof e=="object"?JSON.stringify(e):e}function E(e){let{isBase64Encoded:t=!1,statusCode:r=200,headers:o={},multiValueHeaders:n={},body:l="",html:P=void 0,json:d=void 0,xml:m=void 0}=typeof e=="string"?{body:e}:e,p="text/html; charset=utf-8";return d?p="application/json; charset=utf-8":m&&(p="application/xml; charset=utf-8"),{isBase64Encoded:t,statusCode:r,headers:s({"Content-Type":p},o),multiValueHeaders:n,body:H(l||P||d||m||"")}}function v(e){return async(t,r)=>(t=f(s({},t),{params:w(t.path,e.route)}),E(await e.handler(t,r)))}var A=c(require("path"));var M=c(require("kleur"));var a;(function(n){n.Debug="debug",n.Info="info",n.Warn="warn",n.Err="error"})(a||(a={}));var q={[a.Debug]:"magenta",[a.Info]:"blue",[a.Warn]:"yellow",[a.Err]:"red"};var u;(function(o){o.PRODUCTION="production",o.DEVELOPMENT="development",o.TEST="test"})(u||(u={}));var N={pid:process.pid,cwd:process.cwd(),env:u.TEST,debug:!1};function k(e){return global.__presta__=e,e}function g(){return global.__presta__||k(N),global.__presta__}0&&(module.exports={getCurrentConfig,wrapHandler});
//# sourceMappingURL=data:application/json;base64,
