#!/usr/bin/env node
var Xe=Object.create;var V=Object.defineProperty,Ye=Object.defineProperties,Ze=Object.getOwnPropertyDescriptor,et=Object.getOwnPropertyDescriptors,tt=Object.getOwnPropertyNames,pe=Object.getOwnPropertySymbols,rt=Object.getPrototypeOf,me=Object.prototype.hasOwnProperty,ot=Object.prototype.propertyIsEnumerable;var de=(e,t,r)=>t in e?V(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r,d=(e,t)=>{for(var r in t||(t={}))me.call(t,r)&&de(e,r,t[r]);if(pe)for(var r of pe(t))ot.call(t,r)&&de(e,r,t[r]);return e},P=(e,t)=>Ye(e,et(t)),st=e=>V(e,"__esModule",{value:!0});var it=(e,t,r)=>{if(t&&typeof t=="object"||typeof t=="function")for(let o of tt(t))!me.call(e,o)&&o!=="default"&&V(e,o,{get:()=>t[o],enumerable:!(r=Ze(t,o))||r.enumerable});return e},a=e=>it(st(V(e!=null?Xe(rt(e)):{},"default",e&&e.__esModule&&"default"in e?{get:()=>e.default,enumerable:!0}:{value:e,enumerable:!0})),e);var le=a(require("fs-extra")),Ge=a(require("sade"));var nt="presta",at="0.35.0",lt="Hyper minimal framework for the modern web.",ct="dist/index.js",ut="index.d.ts",pt=["dist","index.d.ts"],mt={presta:"dist/cli.js"},dt={prepare:"pnpm build",build:"node scripts/build",cloc:"pnpx cloc lib/*.ts",typecheck:"pnpx tsc --noEmit"},gt={type:"git",url:"git+ssh://git@github.com/sure-thing/presta.git"},ft="estrattonbailey",ht="MIT",bt={url:"https://github.com/sure-thing/presta/issues"},yt="https://github.com/sure-thing/presta#readme",vt={"@netlify/functions":"^0.7.2","@types/mime-types":"^2.1.0",chokidar:"^3.4.3",deepmerge:"^4.2.2",esbuild:"^0.12.9","esbuild-register":"^2.5.0",filewatcher:"^3.0.1","fs-extra":"^9.0.1","get-port":"^5.1.1",kleur:"^4.1.4","mime-types":"^2.1.31","module-alias":"^2.2.2",ms:"^2.1.2",picomatch:"^2.3.0","pocket.io":"^0.1.4","query-string":"^6.13.7","raw-body":"^2.4.1",regexparam:"^1.3.0","route-sort":"^1.0.0",sade:"^1.7.3",sirv:"^1.0.7","tiny-glob":"^0.2.9","watch-dependency-graph":"^2.6.1"},xt={"@types/fs-extra":"^9.0.12","@types/picomatch":"^2.2.4","@types/sade":"^1.7.3",proxyquire:"^2.1.3","supertest-fetch":"^1.4.3"},ge={name:nt,version:at,description:lt,main:ct,types:ut,files:pt,bin:mt,scripts:dt,repository:gt,author:ft,license:ht,bugs:bt,homepage:yt,dependencies:vt,devDependencies:xt};var O=a(require("kleur"));var w=a(require("path"));function fe(){let e={};function t(i,...c){e[i]&&e[i].map(s=>s(...c))}function r(i,c){return e[i]=e[i]?e[i].concat(c):[c],()=>e[i].splice(e[i].indexOf(c),1)}function o(){e={}}function n(i){return e[i]||[]}return{emit:t,on:r,clear:o,listeners:n}}var he="presta.config.js",v;(function(o){o.PRODUCTION="production",o.DEVELOPMENT="development",o.TEST="test"})(v||(v={}));var wt={pid:process.pid,cwd:process.cwd(),env:v.TEST,debug:!1};function Z(e){return global.__presta__=e,e}function E(){return global.__presta__||Z(wt),global.__presta__}function be(e,{cwd:t}){return e.files&&(e.files=[].concat(e.files).map(r=>w.default.resolve(t,r))),e.output&&(e.output=w.default.resolve(t,e.output)),e.assets&&(e.assets=w.default.resolve(t,e.assets)),e}function k(e,t=!1){try{return require(w.default.resolve(e||he))}catch(r){return f({label:"error",error:r}),t&&process.exit(1),{}}}function ye(){return p({label:"debug",message:"config file values cleared"}),Z(T(P(d({},E()),{config:{}})))}function T({cwd:e=process.cwd(),env:t=E().env,config:r={},cli:o={}}){r=be(d({},r),{cwd:e}),o=be(d({},o),{cwd:e});let n={output:w.default.resolve(e,o.output||r.output||"build"),assets:w.default.resolve(o.assets||r.assets||"public"),files:o.files&&o.files.length?o.files:r.files?[].concat(r.files):[]},i=Z(P(d(d({},E()),n),{env:t,debug:o.debug||E().debug,cwd:e||process.cwd(),configFilepath:w.default.resolve(o.config||he),functionsOutputDir:w.default.join(n.output,"functions"),staticOutputDir:w.default.join(n.output,"static"),routesManifest:w.default.join(n.output,"routes.json"),events:fe()}));return r.plugins&&r.plugins.map(c=>{try{c()}catch(s){f({label:"error",error:s})}}),p({label:"debug",message:`config created ${JSON.stringify(i)}`}),i}var S;(function(n){n.Debug="debug",n.Info="info",n.Warn="warn",n.Err="error"})(S||(S={}));var ve=[],St={[S.Debug]:"magenta",[S.Info]:"blue",[S.Warn]:"yellow",[S.Err]:"red"};function U(e){if(process.env.TESTING)ve.push(e);else{let t=E().debug,r=E().env===v.PRODUCTION?"prod":"dev";if(!t&&e.level===S.Debug)return;console.log([O.default.gray(r),O.default[St[e.level||"info"]](e.label),e.message,e.duration?O.default.gray("+"+e.duration):"",e.error?`

${e.error.stack||e.error}

`:""].filter(Boolean).join(" "))}}function p(e){U(d({level:S.Debug},e))}function y(e){U(d({level:S.Info},e))}function C(e){U(d({level:S.Warn},e))}function f(e){U(d({level:S.Err},e))}function q(...e){E().env===v.TEST?ve.push(e):console.log(...e)}function $(){E().env!==v.TEST&&console.log("")}var K=a(require("fs-extra")),De=a(require("watch-dependency-graph")),ke=a(require("chokidar")),Re=a(require("picomatch"));var z=a(require("fs-extra")),ee=a(require("path")),we=a(require("route-sort"));function xe(e){for(var t=5381,r=e.length;r;)t=t*33^e.charCodeAt(--r);return(t>>>0).toString(36)}function Ft(e,t){let{route:r}=require(e),o=ee.default.basename(e).split(".").reverse().slice(1).reverse().join("."),n=ee.default.join(t.functionsOutputDir,t.env===v.PRODUCTION?o+"-"+xe(z.default.readFileSync(e,"utf8"))+".js":o+".js");return p({label:"debug",message:`generating ${o} lambda`}),delete require.cache[e],delete require.cache[n],z.default.outputFileSync(n,`import { wrapHandler } from 'presta';
import * as file from '${e}';
export const route = file.route
export const handler = wrapHandler(file)`),[r,n]}function G(e,t){let r=e.map(i=>{try{return Ft(i,t)}catch(c){return f({label:"error",error:c}),null}}).filter(Boolean),o=(0,we.default)(r.map(i=>i[0])),n={};for(let i of o){let c=r.find(s=>s[0]===i);c&&(n[i]=c[1])}return z.default.outputFileSync(t.routesManifest,JSON.stringify(n)),r}var te=a(require("fs-extra")),Se=a(require("path")),Fe=a(require("tiny-glob/sync"));function D(e){return/export\s.+\sroute\s+\=/.test(te.default.readFileSync(e,"utf-8"))}function I(e){return/export\s.+\sgetStaticPaths/.test(te.default.readFileSync(e,"utf-8"))}function H(e){return[].concat(e.files).map(t=>(0,Fe.default)(t,{cwd:e.cwd})).flat().map(t=>Se.default.resolve(e.cwd,t))}var Te=a(require("fs-extra")),re=a(require("path")),Oe=a(require("mime-types"));function F(){let e=process.hrtime();return()=>{let[t,r]=process.hrtime(e),o=r/1e6;return t<1?(o>=1?o.toFixed(0):o.toFixed(2))+"ms":t+"."+o.toFixed(0)+"s"}}var Ce=a(require("regexparam"));function Pe(e,t){let r=(0,Ce.default)(t),o=0,n={},i=r.pattern.exec(e)||[];for(;o<r.keys.length;)n[r.keys[o]]=i[++o];return n}function Ct(e){return typeof e=="object"?JSON.stringify(e):e}function J(e){let{isBase64Encoded:t=!1,statusCode:r=200,headers:o={},multiValueHeaders:n={},body:i="",html:c=void 0,json:s=void 0,xml:l=void 0}=typeof e=="string"?{body:e}:e,u="text/html; charset=utf-8";return s?u="application/json; charset=utf-8":l&&(u="application/xml; charset=utf-8"),{isBase64Encoded:t,statusCode:r,headers:d({"Content-Type":u},o),multiValueHeaders:n,body:Ct(i||c||s||l||"")}}var _={};var Ee=a(require("fs-extra")),$e=a(require("path"));function A(e,t){p({label:"debug",message:`removing old static file ${e}`}),Ee.default.remove($e.default.join(t.staticOutputDir,e))}function Pt(e,t="html"){return re.default.extname(e)?e:t==="html"?`${e}/index.html`:`${e}.${t}`}function N(e,t){return new Promise(async(r,o)=>{p({label:"debug",message:`rendering ${JSON.stringify(e)}`});let n=[];for(let i of e){let c=i.replace(t.cwd,"");try{delete require.cache[i];let s=require(i),l=await s.getStaticPaths(),u=_[i]=_[i]||[],m=[];if(!l||!l.length){C({label:"paths",message:`${c} - no paths to render`}),u.forEach(h=>A(h,t));continue}for(let h of l){let ce=F(),B={path:h,params:s.route?Pe(h,s.route):{}},g=J(await s.handler(B,{})),L=g.headers?g.headers["Content-Type"]:"",x=L&&Oe.default.extension(L)||"html",j=Pt(h,x);n.push(j),m.push(j),Te.default.outputFileSync(re.default.join(t.staticOutputDir,j),g.body,"utf-8"),y({label:"built",message:h,duration:ce()})}for(let h of u)m.includes(h)||A(h,t);_[i]=m}catch(s){t.env==="development"?(f({label:"error",message:"errors detected, pausing...",error:s}),r({allGeneratedFiles:n})):(f({label:"error",error:s}),o(s));break}}r({allGeneratedFiles:n})})}function Q(e,t){let r=F();G(e,t),e.length&&y({label:"built",message:"lambdas",duration:r()})}async function je(e){let t=H(e),r=K.default.existsSync(e.configFilepath);t.length||C({label:"paths",message:"no files configured"}),Q(t.filter(D),e);let o=(0,De.default)({alias:{"@":e.cwd}}),n=ke.default.watch(e.cwd,{ignoreInitial:!0,ignored:[e.output,e.assets]});async function i(){t=H(e),await N(t.filter(I),e),Q(t.filter(D),e)}async function c(s){I(s)&&await N([s],e),D(s)&&Q(t.filter(D),e),e.events.emit("refresh"),e.events.emit("done",[s])}o.on("remove",([s])=>{p({label:"watch",message:`fileWatcher - removed ${s}`}),t.splice(t.indexOf(s),1),Q(t.filter(D),e),s===e.configFilepath&&(e=ye(),r=!1,i()),(_[s]||[]).forEach(l=>A(l,e)),e.events.emit("remove",s)}),o.on("change",([s])=>{if(p({label:"watch",message:`fileWatcher - changed ${s}`}),s===e.configFilepath){delete require.cache[e.configFilepath];try{e=T({config:k(e.configFilepath)}),i()}catch(l){f({label:"error",error:l})}}else c(s);e.events.emit("change",s)}),o.on("error",s=>{f({label:"error",error:s})}),n.on("all",async(s,l)=>{if(!(!/add|change/.test(s)||!K.default.existsSync(l)||K.default.lstatSync(l).isDirectory())){if((0,Re.default)(e.files)(l)&&!t.includes(l)&&(p({label:"watch",message:`globalWatcher - add ${l}`}),t.push(l),o.add(l),c(l)),l===e.configFilepath&&!r){p({label:"watch",message:`globalWatcher - add config file ${l}`}),o.add(e.configFilepath);try{e=T({config:k(e.configFilepath)}),r=!0,i()}catch(u){f({label:"error",error:u})}}e.events.emit("add",l)}}),o.add(t),r&&o.add(e.configFilepath);try{t.map(require)}catch(s){f({label:"error",error:s})}}var oe=a(require("fs-extra")),_e=a(require("esbuild"));function Et(e){try{return require(e)}catch(t){return{}}}async function Me(e){let t=F(),r=H(e),o=r.filter(I),n=r.filter(D);if(p({label:"build",message:"starting build"}),!o.length&&!n.length)C({label:"files",message:"no files were found, nothing to build"});else{let i="",c=0,s="",l="",u=await Promise.allSettled([(async()=>{if(o.length){let m=F(),{allGeneratedFiles:h}=await N(o,e);i=m(),c=h.length}})(),(async()=>{if(n.length){let m=F();G(n,e),await(0,_e.build)({entryPoints:Object.values(require(e.routesManifest)),outdir:e.functionsOutputDir,bundle:!0,platform:"node",target:["node12"],minify:!0,allowOverwrite:!0}),s=m()}})(),(async()=>{if(oe.default.existsSync(e.assets)){let m=F();oe.default.copySync(e.assets,e.staticOutputDir),l=m()}})()]);if(u.find(m=>m.status==="rejected")){p({label:"build",message:"build partially failed"}),u.forEach(m=>{m.status==="rejected"&&f({label:"error",error:m.reason})}),process.exit(1);return}(i||s)&&$(),i&&y({label:"static",message:`rendered ${c} file(s)`,duration:i}),s&&y({label:"lambda",message:`compiled ${n.length} function(s)`,duration:s}),l&&y({label:"assets",message:`copied in ${l}`}),(i||s)&&($(),y({label:"complete",message:`in ${t()}`}),$()),e.events.emit("postbuild",{output:e.output,staticOutput:e.staticOutputDir,functionsOutput:e.functionsOutputDir,functionsManifest:Et(e.routesManifest)})}}var ie=a(require("fs")),X=a(require("path")),Be=a(require("http")),Le=a(require("get-port")),ne=a(require("sirv")),Ve=a(require("chokidar")),Ue=a(require("mime-types")),qe=a(require("regexparam"));var se=`<!-- built with presta https://npm.im/presta -->
<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width,initial-scale=1" />
    <title>404</title>
    <link
      rel="stylesheet"
      type="text/css"
      href="https://unpkg.com/svbstrate@4.1.1/dist/svbstrate.css"
    />
  </head>
  <body>
    <div class="f aic jcc" style="height: 100vh">
      <h2 class="p1" style="color: blue">404 Not Found</h2>
    </div>
  </body>
</html>`;var Ie=a(require("url")),He=a(require("query-string")),Ae=a(require("raw-body")),Ne=a(require("mime-types")),$t=/image|audio|video|application\/pdf|application\/zip|applicaton\/octet-stream/i;function Tt(e){return Boolean(e)&&$t.test(e)}async function We(e){var i;let t=String(e.headers["x-forwarded-for"])||e.connection.remoteAddress||"",r=(i=t.split(t.includes(".")?":":",").pop())==null?void 0:i.trim(),o=Tt(e.headers["content-type"]||""),n=e.headers["content-length"]?await(0,Ae.default)(e,{limit:"1mb",encoding:Ne.default.charset(e.headers["content-type"]||"")||void 0}):void 0;return{path:e.url,httpMethod:e.method,headers:P(d({},e.headers),{"client-ip":r}),multiValueHeaders:Object.keys(e.headers).reduce((c,s)=>e.headers[s]&&!e.headers[s].includes(",")?c:P(d({},c),{[s]:e.headers[s].split(",")}),{}),queryStringParameters:(0,He.parse)((0,Ie.parse)(e.url).query),body:n?new Buffer(n).toString(o?"base64":"utf8"):null,isBase64Encoded:o}}function R(e,t){let r=J(t);for(let o in t.multiValueHeaders)e.setHeader(o,String(t.multiValueHeaders[o]));for(let o in t.headers)e.setHeader(o,String(t.headers[o]));e.statusCode=r.statusCode,e.write(r.body),e.end()}var Ot=["position: fixed","bottom: 24px","right: 24px","width: 32px","height: 32px","border-radius: 32px","background: white","color: #FF7A93","font-size: 20px","font-weight: bold","text-align: center","line-height: 31px","box-shadow: 0px 0px 1px rgba(0, 0, 0, 0.04), 0px 4px 8px rgba(0, 0, 0, 0.04), 0px 16px 24px rgba(0, 0, 0, 0.04), 0px 24px 32px rgba(0, 0, 0, 0.04)"],M=`
  <div style="${Ot.join(";")}">~</div>
`;function ze(e,t){let r=X.default.join(e,t);if(!X.default.extname(t))try{return ie.default.readFileSync(X.default.join(e,t,"index.html"),"utf8")}catch(o){}return ie.default.readFileSync(r,"utf8")}function Dt({port:e}){return`
    <script>
      (function (global) {
        try {
          const socketio = document.createElement('script')
          socketio.src = 'https://unpkg.com/pocket.io@0.1.4/min.js'
          socketio.onload = function init () {
            var disconnected = false
            var socket = io('http://localhost:${e}', {
              reconnectionAttempts: 3
            })
            socket.on('connect', function() { console.log('presta connected') })
            socket.on('refresh', function() {
              global.location.reload()
            })
            socket.on('disconnect', function() {
              disconnected = true
            })
            socket.on('reconnect_failed', function(e) {
              if (disconnected) return
              console.error("presta - connection to server on :${e} failed")
            })
          }
          document.head.appendChild(socketio)
        } catch (e) {}
      })(this);
    <\/script>
  `}function kt({port:e,config:t}){let r=Dt({port:e}),o=t.staticOutputDir,n=t.assets;return async function(c,s){let l=F(),u=c.url;if(/^.+\..+$/.test(u)&&!/\.html?$/.test(u))p({label:"debug",message:`attempting to serve static asset ${u}`}),(0,ne.default)(n,{dev:!0})(c,s,()=>{(0,ne.default)(o,{dev:!0})(c,s,()=>{C({label:"serve",message:`404 ${u}`,duration:l()}),R(s,{statusCode:404,body:se+r+M})})});else try{p({label:"debug",message:`attempting to render static HTML for ${u}`});let m=ze(o,u)+r+M;y({label:"serve",message:`200 ${u}`,duration:l()}),R(s,{body:m})}catch(m){p({label:"debug",message:"serve error",error:m}),/ENOENT|EISDIR/.test(m.message)||console.error(m);try{let h=require(t.routesManifest),B=Object.keys(h).map(g=>({matcher:(0,qe.default)(g),route:g})).filter(({matcher:g})=>g.pattern.test(u.split("?")[0])).map(({route:g})=>h[g])[0];if(B){p({label:"debug",message:`attempting to render lambda for ${u}`});let{handler:g}=require(B),L=await We(c),x=await g(L,{}),j=x.headers||{},Ke=x.statusCode>299&&x.statusCode<399,ue=j["Content-Type"],Qe=ue?Ue.default.extension(ue):"html";y({label:"serve",message:`${x.statusCode} ${Ke?j.Location:u}`,duration:l()}),R(s,{statusCode:x.statusCode,headers:x.headers,multiValueHeaders:x.multiValueHeaders,body:Qe==="html"?(x.body||"").split("</body>")[0]+r+M:x.body})}else{p({label:"debug",message:`attempting to render static 404.html page for ${u}`});try{let g=ze(o,"404")+r+M;C({label:"serve",message:`404 ${u}`,duration:l()}),R(s,{statusCode:404,body:g})}catch(g){g.message.includes("ENOENT")||console.error(g),p({label:"debug",message:`rendering default 404 HTML page for ${u}`}),C({label:"serve",message:`404 ${u}`,duration:l()}),R(s,{statusCode:404,body:se+r+M})}}}catch(h){p({label:"debug",message:`rendering default 500 HTML page for ${u}`}),f({label:"serve",message:`500 ${u}`,error:h,duration:l()}),R(s,{statusCode:500,body:""+r+M})}}}}async function ae(e){let t=await(0,Le.default)({port:4e3}),r=Be.default.createServer(kt({port:t,config:e})).listen(t),o=require("pocket.io")(r,{serveClient:!1});return e.events.on("refresh",()=>{p({label:"debug",message:"refresh event received"}),o.emit("refresh")}),Ve.default.watch(e.assets,{ignoreInitial:!0}).on("all",()=>{e.events.emit("refresh")}),{port:t}}var W=(0,Ge.default)("presta"),Y="presta.config.js";function Je(e={}){require("module-alias").addAliases({"@":process.cwd(),"presta:internal":__dirname}),require("esbuild-register/dist/node").register(e)}W.version(ge.version).option("--config, -c",`Path to a config file \u2014 defaults to ${Y}`).option("--output, -o","Specify output directory for built files \u2014 defaults to ./build").option("--assets, -a","Specify static asset directory \u2014 defaults to ./public").option("--debug, -d","Enable debug mode (prints more logs)");W.command("build","Render files(s) to output directory.",{default:!0}).example("build").example("build files/**/*.js").example(`build -c ${Y}`).action(async e=>{Je(),console.clear();let t=T({env:v.PRODUCTION,config:k(e.config,!0),cli:P(d({},e),{files:e._})});le.default.emptyDirSync(t.output),q(`${O.default.blue("presta build")}`),$(),await Me(t)});W.command("watch").option("--no-serve, -n","Do not run local dev server.",!1).describe("Watch and build files(s) to output directory").example("watch").example("watch ./files/**/*.js").example("watch ./files/**/*.js -o ./out").example(`watch -c ${Y}`).action(async e=>{Je(),console.clear();let t=T({env:v.DEVELOPMENT,config:k(e.config),cli:P(d({},e),{files:e._})});if(le.default.emptyDirSync(t.output),e.n)y({label:"dev"}),$();else{let r=await ae(t);q(`${O.default.blue("presta dev")} - http://localhost:${r.port}`),$()}je(t)});W.command("serve").describe("Serve built files.").example("serve").example("serve -o ./out").example(`watch -c ${Y}`).action(async e=>{console.clear();let t=T({env:v.PRODUCTION,config:k(e.config),cli:e}),r=await ae(t);q(`${O.default.blue("presta serve")} - http://localhost:${r.port}`),$()});W.parse(process.argv);
//# sourceMappingURL=data:application/json;base64,
