var V=Object.create;var i=Object.defineProperty,L=Object.defineProperties,Q=Object.getOwnPropertyDescriptor,w=Object.getOwnPropertyDescriptors,H=Object.getOwnPropertyNames,c=Object.getOwnPropertySymbols,B=Object.getPrototypeOf,d=Object.prototype.hasOwnProperty,k=Object.prototype.propertyIsEnumerable;var f=(r,e,t)=>e in r?i(r,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):r[e]=t,n=(r,e)=>{for(var t in e||(e={}))d.call(e,t)&&f(r,t,e[t]);if(c)for(var t of c(e))k.call(e,t)&&f(r,t,e[t]);return r},p=(r,e)=>L(r,w(e)),y=r=>i(r,"__esModule",{value:!0});var q=(r,e)=>{y(r);for(var t in e)i(r,t,{get:e[t],enumerable:!0})},C=(r,e,t)=>{if(e&&typeof e=="object"||typeof e=="function")for(let a of H(e))!d.call(r,a)&&a!=="default"&&i(r,a,{get:()=>e[a],enumerable:!(t=Q(e,a))||t.enumerable});return r},P=r=>C(y(i(r!=null?V(B(r)):{},"default",r&&r.__esModule&&"default"in r?{get:()=>r.default,enumerable:!0}:{value:r,enumerable:!0})),r);q(exports,{wrapHandler:()=>F});var h=P(require("query-string"));function b(r){let e=(0,h.parse)(r,{arrayFormat:"comma"}),t={},a={};for(let s of Object.keys(e)){let o=e[s];Array.isArray(o)?a[s]=o:o&&(t[s]=o)}return{queryStringParameters:t,multiValueQueryStringParameters:a}}var O=/image|audio|video|application\/pdf|application\/zip|applicaton\/octet-stream/i;function R(r){return Boolean(r)&&O.test(r)}function g(r){var o,m;let e=r.rawQuery||r.path.split("?")[1],{queryStringParameters:t,multiValueQueryStringParameters:a}=b(e),s=(m=r.isBase64Encoded)!=null?m:R(((o=r==null?void 0:r.headers)==null?void 0:o["content-type"])||"");return{rawUrl:r.rawUrl||r.path,rawQuery:e,path:r.path,httpMethod:r.httpMethod||"GET",headers:r.headers||{},multiValueHeaders:r.multiValueHeaders||{},queryStringParameters:r.queryStringParameters||t,multiValueQueryStringParameters:r.multiValueQueryStringParameters||a,pathParameters:r.pathParameters||{},body:r.body||null,isBase64Encoded:s!=null?s:!1,requestContext:r.requestContext||{},resource:r.resource||""}}var x=P(require("regexparam"));function E(r,e){let[t]=r.split("?"),a=(0,x.default)(e),s=0,o={},m=a.pattern.exec(t)||[];for(;s<a.keys.length;)o[a.keys[s]]=m[++s];return o}function u(r){for(let e of Object.keys(r))r[e.toLowerCase()]=r[e]||"";return r}var l;(function(a){a.Html="text/html; charset=utf-8",a.Json="application/json; charset=utf-8",a.Xml="application/xml; charset=utf-8"})(l||(l={}));function j(r){return typeof r=="object"?JSON.stringify(r):r}function M(r,e){let t=e.statusCode||200,a=e.headers?u(e.headers):{};return t>299&&t<399||(a["content-type"]=r),{isBase64Encoded:e.isBase64Encoded||!1,statusCode:t,headers:a,multiValueHeaders:e.multiValueHeaders?u(e.multiValueHeaders):{},body:j(e.body||"")}}function S(r){return M(l.Html,r)}function z(r){return typeof r=="string"?S({body:r}):p(n({},r),{statusCode:r.statusCode||200})}function F(r){return async(e,t)=>{let a=g(e);return Object.keys(a.pathParameters||{}).length||(a.pathParameters=E(e.path,r.route)),z(await r.handler(a,t))}}0&&(module.exports={wrapHandler});
//# sourceMappingURL=data:application/json;base64,
