"use strict";var A=Object.create;var a=Object.defineProperty;var _=Object.getOwnPropertyDescriptor;var z=Object.getOwnPropertyNames;var B=Object.getPrototypeOf,N=Object.prototype.hasOwnProperty;var i=(e,t)=>()=>(t||e((t={exports:{}}).exports,t),t.exports),M=(e,t)=>{for(var r in t)a(e,r,{get:t[r],enumerable:!0})},c=(e,t,r,o)=>{if(t&&typeof t=="object"||typeof t=="function")for(let n of z(t))!N.call(e,n)&&n!==r&&a(e,n,{get:()=>t[n],enumerable:!(o=_(t,n))||o.enumerable});return e};var u=(e,t,r)=>(r=e!=null?A(B(e)):{},c(t||!e||!e.__esModule?a(r,"default",{value:e,enumerable:!0}):r,e)),q=e=>c(a({},"__esModule",{value:!0}),e);var b=i(y=>{var d=Object.defineProperty,L=Object.defineProperties,T=Object.getOwnPropertyDescriptors,m=Object.getOwnPropertySymbols,J=Object.prototype.hasOwnProperty,Q=Object.prototype.propertyIsEnumerable,f=(e,t,r)=>t in e?d(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r,U=(e,t)=>{for(var r in t||(t={}))J.call(t,r)&&f(e,r,t[r]);if(m)for(var r of m(t))Q.call(t,r)&&f(e,r,t[r]);return e},D=(e,t)=>L(e,T(t)),I=e=>d(e,"__esModule",{value:!0}),X=(e,t)=>{I(e);for(var r in t)d(e,r,{get:t[r],enumerable:!0})};X(y,{normalizeResponse:()=>W});function v(e){for(let t of Object.keys(e))e[t.toLowerCase()]=e[t]||"";return e}var p;(function(e){e.Html="text/html; charset=utf-8",e.Json="application/json; charset=utf-8",e.Xml="application/xml; charset=utf-8"})(p||(p={}));function F(e){return typeof e=="object"?JSON.stringify(e):e}function G(e,t){let r=t.statusCode||200,o=t.headers?v(t.headers):{};return r>299&&r<399||(o["content-type"]=e),{isBase64Encoded:t.isBase64Encoded||!1,statusCode:r,headers:o,multiValueHeaders:t.multiValueHeaders?v(t.multiValueHeaders):{},body:F(t.body||"")}}function K(e){return G(p.Html,e)}function W(e){return typeof e=="string"?K({body:e}):D(U({},e),{statusCode:e.statusCode||200})}});var R=i(x=>{var h=Object.defineProperty,Y=e=>h(e,"__esModule",{value:!0}),Z=(e,t)=>{Y(e);for(var r in t)h(e,r,{get:t[r],enumerable:!0})};Z(x,{sendServerlessResponse:()=>$});function $(e,t){if(t.multiValueHeaders)for(let r of Object.keys(t.multiValueHeaders))e.setHeader(r,t.multiValueHeaders[r].map(o=>String(o)));if(t.headers)for(let r of Object.keys(t.headers))e.setHeader(r,String(t.headers[r]));e.statusCode=t.statusCode,e.end(t.body)}});var O=i(H=>{var g=Object.defineProperty,ee=e=>g(e,"__esModule",{value:!0}),te=(e,t)=>{ee(e);for(var r in t)g(e,r,{get:t[r],enumerable:!0})};te(H,{normalizeRequestHeaders:()=>re});function re(e){let t={},r={};for(let o of Object.keys(e)){let n=o.toLowerCase(),s=e[o];!s||(Array.isArray(s)?r[n]=s:t[n]=s)}return{headers:t,multiValueHeaders:r}}});var E=i(C=>{var j=Object.defineProperty,oe=e=>j(e,"__esModule",{value:!0}),ne=(e,t)=>{oe(e);for(var r in t)j(e,r,{get:t[r],enumerable:!0})};ne(C,{isBase64EncodedContentType:()=>ae});var se=/image|audio|video|application\/pdf|application\/zip|applicaton\/octet-stream/i;function ae(e){return Boolean(e)&&se.test(e)}});var ue={};M(ue,{adapter:()=>ie,requestToEvent:()=>S});module.exports=q(ue);var V=u(b()),k=u(R()),w=u(O()),P=u(E());function S(e){let{url:t="",method:r}=e,{headers:o,multiValueHeaders:n}=(0,w.normalizeRequestHeaders)(e.headers),s=(0,P.isBase64EncodedContentType)(o["content-type"]||""),l=new URL(t).search||"";return{rawUrl:t,path:t,httpMethod:r,headers:o,multiValueHeaders:n,rawQuery:l,queryStringParameters:{},multiValueQueryStringParameters:{},body:e.body||null,isBase64Encoded:s,pathParameters:{},cookies:e.cookies||{},env:e.env}}function ie(e){return async function(r,o){let n=S(r),s={env:r.env,cookies:r.cookies||{}},l=(0,V.normalizeResponse)(await e(n,s));(0,k.sendServerlessResponse)(o,l)}}0&&(module.exports={adapter,requestToEvent});
//# sourceMappingURL=data:application/json;base64,
