"use strict";var ie=Object.create;var m=Object.defineProperty;var ce=Object.getOwnPropertyDescriptor;var ue=Object.getOwnPropertyNames;var fe=Object.getPrototypeOf,le=Object.prototype.hasOwnProperty;var f=(e,r)=>()=>(r||e((r={exports:{}}).exports,r),r.exports),de=(e,r)=>{for(var t in r)m(e,t,{get:r[t],enumerable:!0})},h=(e,r,t,n)=>{if(r&&typeof r=="object"||typeof r=="function")for(let a of ue(r))!le.call(e,a)&&a!==t&&m(e,a,{get:()=>r[a],enumerable:!(n=ce(r,a))||n.enumerable});return e};var y=(e,r,t)=>(t=e!=null?ie(fe(e)):{},h(r||!e||!e.__esModule?m(t,"default",{value:e,enumerable:!0}):t,e)),me=e=>h(m({},"__esModule",{value:!0}),e);var O=f((ar,b)=>{"use strict";b.exports=e=>encodeURIComponent(e).replace(/[!'()*]/g,r=>`%${r.charCodeAt(0).toString(16).toUpperCase()}`)});var w=f((sr,S)=>{"use strict";var j="%[a-f0-9]{2}",x=new RegExp(j,"gi"),F=new RegExp("("+j+")+","gi");function p(e,r){try{return decodeURIComponent(e.join(""))}catch{}if(e.length===1)return e;r=r||1;var t=e.slice(0,r),n=e.slice(r);return Array.prototype.concat.call([],p(t),p(n))}function ye(e){try{return decodeURIComponent(e)}catch{for(var r=e.match(x),t=1;t<r.length;t++)e=p(r,t).join(""),r=e.match(x);return e}}function pe(e){for(var r={"%FE%FF":"\uFFFD\uFFFD","%FF%FE":"\uFFFD\uFFFD"},t=F.exec(e);t;){try{r[t[0]]=decodeURIComponent(t[0])}catch{var n=ye(t[0]);n!==t[0]&&(r[t[0]]=n)}t=F.exec(e)}r["%C2"]="\uFFFD";for(var a=Object.keys(r),o=0;o<a.length;o++){var s=a[o];e=e.replace(new RegExp(s,"g"),r[s])}return e}S.exports=function(e){if(typeof e!="string")throw new TypeError("Expected `encodedURI` to be of type `string`, got `"+typeof e+"`");try{return e=e.replace(/\+/g," "),decodeURIComponent(e)}catch{return pe(e)}}});var E=f((or,C)=>{"use strict";C.exports=(e,r)=>{if(!(typeof e=="string"&&typeof r=="string"))throw new TypeError("Expected the arguments to be of type `string`");if(r==="")return[e];let t=e.indexOf(r);return t===-1?[e]:[e.slice(0,t),e.slice(t+r.length)]}});var A=f((ir,v)=>{"use strict";v.exports=function(e,r){for(var t={},n=Object.keys(e),a=Array.isArray(r),o=0;o<n.length;o++){var s=n[o],c=e[s];(a?r.indexOf(s)!==-1:r(s,c,e))&&(t[s]=c)}return t}});var k=f(u=>{"use strict";var ge=O(),he=w(),R=E(),be=A(),Oe=e=>e==null;function xe(e){switch(e.arrayFormat){case"index":return r=>(t,n)=>{let a=t.length;return n===void 0||e.skipNull&&n===null||e.skipEmptyString&&n===""?t:n===null?[...t,[i(r,e),"[",a,"]"].join("")]:[...t,[i(r,e),"[",i(a,e),"]=",i(n,e)].join("")]};case"bracket":return r=>(t,n)=>n===void 0||e.skipNull&&n===null||e.skipEmptyString&&n===""?t:n===null?[...t,[i(r,e),"[]"].join("")]:[...t,[i(r,e),"[]=",i(n,e)].join("")];case"comma":case"separator":return r=>(t,n)=>n==null||n.length===0?t:t.length===0?[[i(r,e),"=",i(n,e)].join("")]:[[t,i(n,e)].join(e.arrayFormatSeparator)];default:return r=>(t,n)=>n===void 0||e.skipNull&&n===null||e.skipEmptyString&&n===""?t:n===null?[...t,i(r,e)]:[...t,[i(r,e),"=",i(n,e)].join("")]}}function Fe(e){let r;switch(e.arrayFormat){case"index":return(t,n,a)=>{if(r=/\[(\d*)\]$/.exec(t),t=t.replace(/\[\d*\]$/,""),!r){a[t]=n;return}a[t]===void 0&&(a[t]={}),a[t][r[1]]=n};case"bracket":return(t,n,a)=>{if(r=/(\[\])$/.exec(t),t=t.replace(/\[\]$/,""),!r){a[t]=n;return}if(a[t]===void 0){a[t]=[n];return}a[t]=[].concat(a[t],n)};case"comma":case"separator":return(t,n,a)=>{let o=typeof n=="string"&&n.includes(e.arrayFormatSeparator),s=typeof n=="string"&&!o&&l(n,e).includes(e.arrayFormatSeparator);n=s?l(n,e):n;let c=o||s?n.split(e.arrayFormatSeparator).map(oe=>l(oe,e)):n===null?n:l(n,e);a[t]=c};default:return(t,n,a)=>{if(a[t]===void 0){a[t]=n;return}a[t]=[].concat(a[t],n)}}}function H(e){if(typeof e!="string"||e.length!==1)throw new TypeError("arrayFormatSeparator must be single character string")}function i(e,r){return r.encode?r.strict?ge(e):encodeURIComponent(e):e}function l(e,r){return r.decode?he(e):e}function N(e){return Array.isArray(e)?e.sort():typeof e=="object"?N(Object.keys(e)).sort((r,t)=>Number(r)-Number(t)).map(r=>e[r]):e}function q(e){let r=e.indexOf("#");return r!==-1&&(e=e.slice(0,r)),e}function je(e){let r="",t=e.indexOf("#");return t!==-1&&(r=e.slice(t)),r}function V(e){e=q(e);let r=e.indexOf("?");return r===-1?"":e.slice(r+1)}function P(e,r){return r.parseNumbers&&!Number.isNaN(Number(e))&&typeof e=="string"&&e.trim()!==""?e=Number(e):r.parseBooleans&&e!==null&&(e.toLowerCase()==="true"||e.toLowerCase()==="false")&&(e=e.toLowerCase()==="true"),e}function U(e,r){r=Object.assign({decode:!0,sort:!0,arrayFormat:"none",arrayFormatSeparator:",",parseNumbers:!1,parseBooleans:!1},r),H(r.arrayFormatSeparator);let t=Fe(r),n=Object.create(null);if(typeof e!="string"||(e=e.trim().replace(/^[?#&]/,""),!e))return n;for(let a of e.split("&")){if(a==="")continue;let[o,s]=R(r.decode?a.replace(/\+/g," "):a,"=");s=s===void 0?null:["comma","separator"].includes(r.arrayFormat)?s:l(s,r),t(l(o,r),s,n)}for(let a of Object.keys(n)){let o=n[a];if(typeof o=="object"&&o!==null)for(let s of Object.keys(o))o[s]=P(o[s],r);else n[a]=P(o,r)}return r.sort===!1?n:(r.sort===!0?Object.keys(n).sort():Object.keys(n).sort(r.sort)).reduce((a,o)=>{let s=n[o];return Boolean(s)&&typeof s=="object"&&!Array.isArray(s)?a[o]=N(s):a[o]=s,a},Object.create(null))}u.extract=V;u.parse=U;u.stringify=(e,r)=>{if(!e)return"";r=Object.assign({encode:!0,strict:!0,arrayFormat:"none",arrayFormatSeparator:","},r),H(r.arrayFormatSeparator);let t=s=>r.skipNull&&Oe(e[s])||r.skipEmptyString&&e[s]==="",n=xe(r),a={};for(let s of Object.keys(e))t(s)||(a[s]=e[s]);let o=Object.keys(a);return r.sort!==!1&&o.sort(r.sort),o.map(s=>{let c=e[s];return c===void 0?"":c===null?i(s,r):Array.isArray(c)?c.reduce(n(s),[]).join("&"):i(s,r)+"="+i(c,r)}).filter(s=>s.length>0).join("&")};u.parseUrl=(e,r)=>{r=Object.assign({decode:!0},r);let[t,n]=R(e,"#");return Object.assign({url:t.split("?")[0]||"",query:U(V(e),r)},r&&r.parseFragmentIdentifier&&n?{fragmentIdentifier:l(n,r)}:{})};u.stringifyUrl=(e,r)=>{r=Object.assign({encode:!0,strict:!0},r);let t=q(e.url).split("?")[0]||"",n=u.extract(e.url),a=u.parse(n,{sort:!1}),o=Object.assign(a,e.query),s=u.stringify(o,r);s&&(s=`?${s}`);let c=je(e.url);return e.fragmentIdentifier&&(c=`#${i(e.fragmentIdentifier,r)}`),`${t}${s}${c}`};u.pick=(e,r,t)=>{t=Object.assign({parseFragmentIdentifier:!0},t);let{url:n,query:a,fragmentIdentifier:o}=u.parseUrl(e,t);return u.stringifyUrl({url:n,query:be(a,r),fragmentIdentifier:o},t)};u.exclude=(e,r,t)=>{let n=Array.isArray(r)?a=>!r.includes(a):(a,o)=>!r(a,o);return u.pick(e,n,t)}});var T=f(D=>{var Se=Object.create,d=Object.defineProperty,we=Object.defineProperties,Ce=Object.getOwnPropertyDescriptor,Ee=Object.getOwnPropertyDescriptors,ve=Object.getOwnPropertyNames,B=Object.getOwnPropertySymbols,Ae=Object.getPrototypeOf,_=Object.prototype.hasOwnProperty,Pe=Object.prototype.propertyIsEnumerable,M=(e,r,t)=>r in e?d(e,r,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[r]=t,Re=(e,r)=>{for(var t in r||(r={}))_.call(r,t)&&M(e,t,r[t]);if(B)for(var t of B(r))Pe.call(r,t)&&M(e,t,r[t]);return e},He=(e,r)=>we(e,Ee(r)),Q=e=>d(e,"__esModule",{value:!0}),Ne=(e,r)=>{Q(e);for(var t in r)d(e,t,{get:r[t],enumerable:!0})},qe=(e,r,t)=>{if(r&&typeof r=="object"||typeof r=="function")for(let n of ve(r))!_.call(e,n)&&n!=="default"&&d(e,n,{get:()=>r[n],enumerable:!(t=Ce(r,n))||t.enumerable});return e},$=e=>qe(Q(d(e!=null?Se(Ae(e)):{},"default",e&&e.__esModule&&"default"in e?{get:()=>e.default,enumerable:!0}:{value:e,enumerable:!0})),e);Ne(D,{normalizeResponse:()=>z,wrapHandler:()=>De});var Ve=$(k());function Ue(e){let r=(0,Ve.parse)(e,{arrayFormat:"comma"}),t={},n={};for(let a of Object.keys(r)){let o=r[a];Array.isArray(o)?n[a]=o:o&&(t[a]=o)}return{queryStringParameters:t,multiValueQueryStringParameters:n}}var ke=/image|audio|video|application\/pdf|application\/zip|applicaton\/octet-stream/i;function Be(e){return Boolean(e)&&ke.test(e)}function Me(e){var r,t;let n=e.rawQuery||e.path.split("?")[1],{queryStringParameters:a,multiValueQueryStringParameters:o}=Ue(n),s=(t=e.isBase64Encoded)!=null?t:Be(((r=e==null?void 0:e.headers)==null?void 0:r["content-type"])||"");return{rawUrl:e.rawUrl||e.path,rawQuery:n,path:e.path,httpMethod:e.httpMethod||"GET",headers:e.headers||{},multiValueHeaders:e.multiValueHeaders||{},queryStringParameters:e.queryStringParameters||a,multiValueQueryStringParameters:e.multiValueQueryStringParameters||o,pathParameters:e.pathParameters||{},body:e.body||null,isBase64Encoded:s!=null?s:!1,requestContext:e.requestContext||{},resource:e.resource||""}}var Ie=$(require("regexparam"));function _e(e,r){let[t]=e.split("?"),n=(0,Ie.default)(r),a=0,o={},s=n.pattern.exec(t)||[];for(;a<n.keys.length;)o[n.keys[a]]=s[++a];return o}function I(e){for(let r of Object.keys(e))e[r.toLowerCase()]=e[r]||"";return e}var g;(function(e){e.Html="text/html; charset=utf-8",e.Json="application/json; charset=utf-8",e.Xml="application/xml; charset=utf-8"})(g||(g={}));function Qe(e){return typeof e=="object"?JSON.stringify(e):e}function $e(e,r){let t=r.statusCode||200,n=r.headers?I(r.headers):{};return t>299&&t<399||(n["content-type"]=e),{isBase64Encoded:r.isBase64Encoded||!1,statusCode:t,headers:n,multiValueHeaders:r.multiValueHeaders?I(r.multiValueHeaders):{},body:Qe(r.body||"")}}function ze(e){return $e(g.Html,e)}function z(e){return typeof e=="string"?ze({body:e}):He(Re({},e),{statusCode:e.statusCode||200})}function De(e){return async(r,t)=>{let n=Me(r);return Object.keys(n.pathParameters||{}).length||(n.pathParameters=_e(r.path,e.route)),z(await e.handler(n,t))}}});var G=f(J=>{var L=Object.defineProperty,Te=e=>L(e,"__esModule",{value:!0}),Le=(e,r)=>{Te(e);for(var t in r)L(e,t,{get:r[t],enumerable:!0})};Le(J,{sendServerlessResponse:()=>Je});function Je(e,r){if(r.multiValueHeaders)for(let t of Object.keys(r.multiValueHeaders))e.setHeader(t,r.multiValueHeaders[t].map(n=>String(n)));if(r.headers)for(let t of Object.keys(r.headers))e.setHeader(t,String(r.headers[t]));e.statusCode=r.statusCode,e.end(r.body)}});var W=f(K=>{var X=Object.defineProperty,Ge=e=>X(e,"__esModule",{value:!0}),Xe=(e,r)=>{Ge(e);for(var t in r)X(e,t,{get:r[t],enumerable:!0})};Xe(K,{normalizeRequestHeaders:()=>Ke});function Ke(e){let r={},t={};for(let n of Object.keys(e)){let a=n.toLowerCase(),o=e[n];!o||(Array.isArray(o)?t[a]=o:r[a]=o)}return{headers:r,multiValueHeaders:t}}});var ee=f(Z=>{var Y=Object.defineProperty,We=e=>Y(e,"__esModule",{value:!0}),Ye=(e,r)=>{We(e);for(var t in r)Y(e,t,{get:r[t],enumerable:!0})};Ye(Z,{isBase64EncodedContentType:()=>er});var Ze=/image|audio|video|application\/pdf|application\/zip|applicaton\/octet-stream/i;function er(e){return Boolean(e)&&Ze.test(e)}});var tr={};de(tr,{adapter:()=>rr,requestToEvent:()=>se});module.exports=me(tr);var re=y(T()),te=y(G()),ne=y(W()),ae=y(ee());function se(e){let{url:r="",method:t}=e,{headers:n,multiValueHeaders:a}=(0,ne.normalizeRequestHeaders)(e.headers),o=(0,ae.isBase64EncodedContentType)(n["content-type"]||""),s=new URL(r).search||"";return{rawUrl:r,path:r,httpMethod:t,headers:n,multiValueHeaders:a,rawQuery:s,queryStringParameters:{},multiValueQueryStringParameters:{},body:e.body||null,isBase64Encoded:o,pathParameters:{},cookies:e.cookies||{},env:e.env}}function rr(e){return async function(t,n){let a=se(t),o={env:t.env,cookies:t.cookies||{}},s=(0,re.normalizeResponse)(await e(a,o));(0,te.sendServerlessResponse)(n,s)}}0&&(module.exports={adapter,requestToEvent});
//# sourceMappingURL=data:application/json;base64,
