var z=Object.create;var f=Object.defineProperty;var A=Object.getOwnPropertyDescriptor;var T=Object.getOwnPropertyNames;var _=Object.getPrototypeOf,I=Object.prototype.hasOwnProperty;var h=e=>f(e,"__esModule",{value:!0});var J=(e,t)=>{h(e);for(var i in t)f(e,i,{get:t[i],enumerable:!0})},U=(e,t,i)=>{if(t&&typeof t=="object"||typeof t=="function")for(let s of T(t))!I.call(e,s)&&s!=="default"&&f(e,s,{get:()=>t[s],enumerable:!(i=A(t,s))||i.enumerable});return e},u=e=>U(h(f(e!=null?z(_(e)):{},"default",e&&e.__esModule&&"default"in e?{get:()=>e.default,enumerable:!0}:{value:e,enumerable:!0})),e);J(exports,{default:()=>ie,generateRedirectsString:()=>R,getNetlifyConfig:()=>$,getUserConfiguredRedirects:()=>j,normalizeNetlifyRoute:()=>D,onPostBuild:()=>O,prestaRoutesToNetlifyRedirects:()=>C,toAbsolutePath:()=>b,toRelativePath:()=>te,validateAndNormalizeNetlifyConfig:()=>w});var d=u(require("assert")),a=u(require("fs-extra")),o=u(require("path")),N=u(require("toml")),m=u(require("netlify-redirect-parser")),v=u(require("filewatcher")),g=u(require("presta")),y=u(require("presta/utils/timer"));var B="@presta/adapter-netlify",E="0.5.2",G="Netlify adapter for Presta.",L="dist/index.js",H="dist/index.d.ts",K=["dist"],Q={build:"node scripts/build && tsc --emitDeclarationOnly",typecheck:"tsc --noEmit",test:"tap test.ts --ts --coverage-report=text-lcov --no-check-coverage"},V={type:"git",url:"git+ssh://git@github.com/sure-thing/presta.git"},W="estrattonbailey",X="MIT",Y={url:"https://github.com/sure-thing/presta/issues"},Z="https://github.com/sure-thing/presta#readme",x={filewatcher:"^3.0.1","fs-extra":"^9.0.1","netlify-redirect-parser":"^8.0.0",presta:"workspace:^0.45.0",toml:"^3.0.0"},ee={"@types/fs-extra":"^9.0.12","@types/node":"^18.6.3",typescript:"^4.7.4"},p={name:B,version:E,description:G,main:L,types:H,files:K,scripts:Q,repository:V,author:W,license:X,bugs:Y,homepage:Z,dependencies:x,devDependencies:ee};var r=`${p.name}@${p.version}`;function $(e){let t=a.default.readFileSync(e,"utf8"),i=(0,N.parse)(t);return JSON.parse(JSON.stringify(i))}function w(e){(0,d.default)(!!e,"Missing required netlify.toml config file"),(0,d.default)(!!e.build,"Missing required netlify.toml config: build");let t=b(process.cwd(),e.build.publish);(0,d.default)(!!t,"Missing required netlify.toml config: build.publish");let i=b(process.cwd(),e.build.functions);return{build:{publish:t,functions:i}}}function b(e,t){return t?o.default.join(e,t):void 0}function te(e,t){return o.default.relative(e,t)}function D(e){return e=e.replace(/^\*/,"/*"),e=e.replace(/^\/\//,"/"),e}function C(e){return Object.values(e).map(t=>({from:D(t.route),to:`/.netlify/functions/${o.default.basename(t.dest,".js")}`,status:200,force:!1,query:{},conditions:{},signed:void 0}))}function R(e){return e.map(t=>[t.from,t.to,`${t.status}${t.force?"!":""}`].join(" ")).join(`
`)}async function j(e){return[...await(0,m.parseFileRedirects)(o.default.join(process.cwd(),"_redirects")),...await(0,m.parseFileRedirects)(o.default.join(e,"_redirects"))].reduce((t,i)=>t.find(s=>s.from===i.from)?t:t.concat(i),[])}async function O(e,t){let{publish:i,functions:s}=e.build,l=(0,y.timer)(),c=t.getManifest(),S=await j(i),P=t.getStaticOutputDir(),F=t.getFunctionsOutputDir();if(Object.keys(c.statics).length&&(i===P?t.logger.debug(`${r} Netlify publish directory matches static output directory`):(a.default.copySync(t.getStaticOutputDir(),i),t.logger.debug(`${r} copying static files`))),Object.keys(c.functions).length)if(!s)t.logger.warn(`${r} detected built functions, but Netlify config does not specify an functions output directory.`);else{let M=C(t.getManifest().functions),k=S.concat(M),q=o.default.join(e.build.publish,"_redirects");a.default.outputFileSync(q,R(k),"utf8"),t.logger.debug(`${r} writing redirects`),s===F?t.logger.debug(`${r} Netlify functions directory matches functions output directory`):(a.default.copySync(t.getFunctionsOutputDir(),s),t.logger.debug(`${r} copying functions`))}t.logger.info(`${r} complete`,{duration:l()})}var ie=(0,g.createPlugin)(()=>e=>{let t=(0,y.timer)();e.logger.debug(`${r} initialized`);let i=o.default.join(e.cwd,"netlify.toml");if(a.default.existsSync(i))e.logger.debug(`${r} Netlify config found`);else{e.logger.debug(`${r} Netlify config not found, initializing defaults`);let l=o.default.relative(e.cwd,e.getStaticOutputDir()),c=o.default.relative(e.cwd,e.getFunctionsOutputDir());a.default.writeFileSync(i,`[build]
	command = 'npm run build'
	publish = '${l}'
	functions = '${c}'`,"utf8")}let s=w($(i));if(e.logger.info(`${r} initialized`,{duration:t()}),e.mode===g.Mode.Dev){let l=(0,v.default)();return l.add(i),l.on("change",()=>{e.logger.debug(`${r} Netlify config changed, requesting dev server restart`),e.restartDevServer()}),{name:r,cleanup(){l.removeAll()}}}else return e.events.on("buildComplete",()=>{e.logger.debug(`${r} received event buildComplete`),O(s,e)}),{name:r}});0&&(module.exports={generateRedirectsString,getNetlifyConfig,getUserConfiguredRedirects,normalizeNetlifyRoute,onPostBuild,prestaRoutesToNetlifyRedirects,toAbsolutePath,toRelativePath,validateAndNormalizeNetlifyConfig});
//# sourceMappingURL=data:application/json;base64,
